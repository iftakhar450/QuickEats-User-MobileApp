"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var restaurants_service_1 = require("../restaurants/restaurants.service");
var router_1 = require("@angular/router");
var itemdetail_1 = require("../restaurant-detail/itemdetail");
var application_settings_1 = require("tns-core-modules/application-settings");
var elementRegistryModule = require("nativescript-angular/element-registry");
var router_2 = require("@angular/router");
var nativescript_angular_1 = require("nativescript-angular");
var add_to_cart_service_1 = require("./add-to-cart.service");
elementRegistryModule.registerElement("CardView", function () { return require("nativescript-cardview").CardView; });
var platform_1 = require("platform");
var application = require("application");
var application_1 = require("application");
var dialog = require("nativescript-dialog");
var DeviceInfo = /** @class */ (function () {
    function DeviceInfo(uuid) {
        this.uuid = uuid;
    }
    return DeviceInfo;
}());
var addtocartdetailComponent = /** @class */ (function () {
    function addtocartdetailComponent(router, CartService, routerExtensions, page, restaurantService, route) {
        this.router = router;
        this.CartService = CartService;
        this.routerExtensions = routerExtensions;
        this.page = page;
        this.restaurantService = restaurantService;
        this.route = route;
        this.totalPrice = 0;
        this.rider_tip = 0;
        this.delivery_fee = 2;
        // This pattern makes use of Angular�s dependency injection implementation to inject an instance of the ItemService service into this class. 
        // Angular knows about this service because it is included in your app�s main NgModule, defined in app.module.ts.
        this.add_to_cart_items = new Array();
        this.cartItems = new Array();
        this.deviceInformation = new DeviceInfo(platform_1.device.uuid);
    }
    addtocartdetailComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.get_cart(this.deviceInformation.uuid);
        this.rest_id = parseInt(application_settings_1.getString("rest_id"));
        if (!platform_1.isAndroid) {
            return;
        }
        application.android.on(application_1.AndroidApplication.activityBackPressedEvent, function (data) {
            if (_this.router.isActive("/add-to-cart-detail", true)) {
                data.cancel = true; // prevents default back button behavior
                _this.goBack();
            }
        });
    };
    addtocartdetailComponent.prototype.removeZeroEntryElement = function (arr) {
        for (var i = 0; i < arr.length; i++) {
            //console.log(arr.length);
            if (arr[i].quantity == 0) {
                arr.splice(i, 1);
                //console.log(arr);
                i = -1;
            }
        }
        this.add_to_cart_items = arr;
        for (var i = 0; i < arr.length; i++) {
            this.totalPrice = this.totalPrice + (arr[i].price * arr[i].quantity);
        }
    };
    addtocartdetailComponent.prototype.get_cart = function (id) {
        var _this = this;
        this.CartService
            .get_From_Cart(id)
            .subscribe(function (result) {
            var string_response = JSON.stringify(result);
            var helper = JSON.parse(string_response);
            for (var i = 0; i < helper._body.cart.length; i++) {
                var check = 0;
                var item = new itemdetail_1.itemdetail(helper._body.cart[i].item_id, helper._body.cart[i].item_name, helper._body.cart[i].item_type, helper._body.cart[i].item_price, helper._body.cart[i].item_detail, helper._body.cart[i].item_time, helper._body.cart[i].cooking_time, helper._body.cart[i].menu_id);
                item.quantity = 1;
                for (var j = 0; j < _this.cartItems.length; j++) {
                    if (_this.cartItems[j].id == helper._body.cart[i].item_id) {
                        _this.cartItems[j].quantity += 1;
                        //addToCartService.user_cart[j].quantity=1;
                        _this.totalPrice = parseInt(JSON.stringify(_this.totalPrice)) + parseInt(helper._body.cart[i].item_price);
                        _this.grand_total = _this.totalPrice + _this.delivery_fee + _this.rider_tip;
                        check = 1;
                    }
                }
                if (check == 0) {
                    _this.cartItems.push(item);
                    //addToCartService.user_cart.push(item);
                    _this.totalPrice = parseInt(JSON.stringify(_this.totalPrice)) + parseInt(helper._body.cart[i].item_price);
                    _this.grand_total = _this.totalPrice + _this.delivery_fee + _this.rider_tip;
                    _this.cartItemsLength = 1;
                }
            }
        }, function (error) {
            //this.onGetDataError(error);
            console.log(JSON.stringify(error));
            //  alert( console.log(JSON.stringify(error._body.message)));
        });
    };
    addtocartdetailComponent.prototype.goBack = function () {
        this.routerExtensions.navigate(["/restaurants-detail", this.rest_id], {
            clearHistory: true,
            transition: {
                name: "flip",
                duration: 500,
                curve: "linear"
            }
        });
    };
    addtocartdetailComponent.prototype.onchkout = function () {
        var token = application_settings_1.getString("access_token");
        if (token == "") {
            var that_1 = this;
            dialog.show({
                title: "Attention",
                message: "You  have to login first!",
                cancelButtonText: "Cancel",
                okButtonText: "login"
            }).then(function (r) {
                console.log("Result: " + r);
                if (r == true) {
                    that_1.router.navigate(["/login"]);
                }
            });
        }
        else {
            var that = this;
            console.log("called");
            var len = add_to_cart_service_1.addToCartService.user_cart.length;
            add_to_cart_service_1.addToCartService.user_cart.splice(0, len);
            for (var l = 0; l < that.cartItems.length; l++) {
                add_to_cart_service_1.addToCartService.user_cart.push(that.cartItems[l]);
            }
            if (!this.rider_tip)
                this.rider_tip = 0;
            console.log("called  1" + that.rider_tip);
            application_settings_1.setString("rider_tip", JSON.stringify(that.rider_tip));
            console.log("called   3");
            that.router.navigate(["/checkout", that.totalPrice]);
            console.log("called  5");
        }
    };
    addtocartdetailComponent.prototype.delItem = function (id, index) {
        var that = this;
        dialog.show({
            title: "Attention",
            message: "Sure To Delete ?",
            cancelButtonText: "Cancel",
            okButtonText: "Yes"
        }).then(function (r) {
            console.log("Result: " + r);
            if (r == true) {
                that.CartService
                    .del_cart_item(id)
                    .subscribe(function (result) {
                    console.log("Dialog: " + index);
                    var string_response = JSON.stringify(result);
                    var helper = JSON.parse(string_response);
                    that.totalPrice -= that.cartItems[index].quantity * that.cartItems[index].price;
                    that.grand_total -= that.cartItems[index].quantity * that.cartItems[index].price;
                    that.cartItems.splice(index, 1);
                    console.log(JSON.stringify(that.cartItems));
                }, function (error) {
                    //this.onGetDataError(error);
                    console.log(JSON.stringify(error));
                    //alert( console.log(JSON.stringify(error._body.message)));
                });
            }
        });
    };
    addtocartdetailComponent.prototype.onRiderTipPlus = function () {
        if (this.rider_tip < 10) {
            this.rider_tip = this.rider_tip + 1;
            this.grand_total = this.grand_total + 1;
        }
    };
    addtocartdetailComponent.prototype.onRiderTipMinus = function () {
        if (this.rider_tip > 0) {
            this.rider_tip = this.rider_tip - 1;
            this.grand_total = this.grand_total - 1;
        }
    };
    addtocartdetailComponent.prototype.search_restaurant_from_empty_cart = function () {
        this.router.navigate(['/restaurants']);
    };
    addtocartdetailComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./add-to-cart-detail.component.html",
            styleUrls: ['./add-to-cart-detail.css']
        }),
        __metadata("design:paramtypes", [router_2.Router, add_to_cart_service_1.addToCartService, nativescript_angular_1.RouterExtensions,
            page_1.Page, restaurants_service_1.RestaurantService,
            router_1.ActivatedRoute])
    ], addtocartdetailComponent);
    return addtocartdetailComponent;
}());
exports.addtocartdetailComponent = addtocartdetailComponent;
//# sourceMappingURL=data:application/json;base64,