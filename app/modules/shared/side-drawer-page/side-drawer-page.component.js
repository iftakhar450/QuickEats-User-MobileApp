"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var application_settings_1 = require("tns-core-modules/application-settings");
var page_1 = require("ui/page");
var platform_1 = require("platform");
var action_bar_1 = require("ui/action-bar");
var angular_1 = require("nativescript-telerik-ui/sidedrawer/angular");
var sidedrawer_1 = require("nativescript-telerik-ui/sidedrawer");
var userOrders_1 = require("../../myorders/userOrders");
var Fooditem_1 = require("../../myorders/Fooditem");
var order_service_1 = require("../../myorders/order.service");
var http = require("http");
var SideDrawerPageComponent = /** @class */ (function () {
    function SideDrawerPageComponent(routerExtensions, activatedRoute, page, ngZone, orderservice) {
        this.routerExtensions = routerExtensions;
        this.activatedRoute = activatedRoute;
        this.page = page;
        this.ngZone = ngZone;
        this.orderservice = orderservice;
        /**
         * On tap of any side-drawer item, hiding content if this flag is true.
         */
        this.isContentVisible = true;
        /**
         * Navigation Menu Items
         */
        this.navMenu = [
            { imageURL: 'res://home', name: 'Find Food', commands: ['/'] },
            { imageURL: 'res://myorders', name: 'My Orders', commands: ['/myorders'] },
            { imageURL: 'res://mycart', name: 'My Cart', commands: ['/add-to-cart-detail'] },
            { imageURL: 'res://mydetail', name: 'My Profile', commands: ['/mydetail'] },
            { imageURL: 'res://paymentmethod', name: 'Payment Method', commands: ['/payment'] },
            { imageURL: 'res://deliveraddress', name: 'Delivery Addresses', commands: ['/deliveryaddress'] },
            { imageURL: 'res://aboutus', name: 'About Us', commands: ['/aboutus'] },
            { imageURL: 'res://shuffle', name: 'Change Password', commands: ['/changepassword'] },
            { imageURL: 'res://logout', name: 'Logout', commands: ['/logout'] }
        ];
        this.orders = [];
        if (typeof (application_settings_1.getString("user_id")) !== 'undefined') {
            var id = JSON.parse(application_settings_1.getString("user_id"));
            //alert(id);
            this.getUserOrderDetail(id);
        }
        this.setActionBarIcon(this.page);
        this.setDrawerTransition();
        this.email = application_settings_1.getString("email");
        this.name = application_settings_1.getString("name");
        this.token = application_settings_1.getString("access_token");
        if (this.token == "" || this.token == null) {
            this.email = "Your are not logged in";
            this.navMenu = [
                { imageURL: 'res://login', name: 'Login', commands: ['/login'] },
                { imageURL: 'res://registered', name: 'Register', commands: ['/signup'] }
            ];
        }
    }
    SideDrawerPageComponent.prototype.getUserOrderDetail = function (id) {
        var _this = this;
        this.orderservice.getUserOrderDetailFromApi(id)
            .subscribe(function (result) {
            /* this.orders = new Array<Orders>();*/
            //this.completed_orders = new Array<Orders>();
            var helper = JSON.parse(JSON.stringify(result));
            for (var i = 0; i < helper._body.response.length; i++) {
                var menuitems = [];
                for (var j = 0; j < helper._body.response[i].fooditem_to_order_Fk.length; j++) {
                    var chk = 0;
                    if (j == 0) {
                        menuitems.push(new Fooditem_1.Items(helper._body.response[i].fooditem_to_order_Fk[j].item_name, helper._body.response[i].fooditem_to_order_Fk[j].item_price, helper._body.response[i].fooditem_to_order_Fk[j].item_id, 1));
                    }
                    else {
                        for (var k = 0; k < menuitems.length; k++) {
                            if (menuitems[k].item_id == helper._body.response[i].fooditem_to_order_Fk[j].item_id) {
                                menuitems[k].item_quantity += 1;
                                chk = 1;
                                break;
                            }
                            else if (k == (menuitems.length - 1) && chk != 1) {
                                menuitems.push(new Fooditem_1.Items(helper._body.response[i].fooditem_to_order_Fk[j].item_name, helper._body.response[i].fooditem_to_order_Fk[j].item_price, helper._body.response[i].fooditem_to_order_Fk[j].item_id, 1));
                                break;
                            }
                        }
                    }
                }
                if (helper._body.response[i].order_status == "Placed") {
                    _this.orders[i] = new userOrders_1.Orders(helper._body.response[i].order_id, helper._body.response[i].restaurant_id.restaurant_name, helper._body.response[i].restaurant_id.restaurant_address, helper._body.response[i].restaurant_id.restaurant_contect, "Not assign yet", "", helper._body.response[i].order_payment, helper._body.response[i].order_status, menuitems, "", "", helper._body.response[i].order_lat, helper._body.response[i].order_lan, helper._body.response[i].rider_tip, 0);
                }
                else {
                    _this.orders[i] = new userOrders_1.Orders(helper._body.response[i].order_id, helper._body.response[i].restaurant_id.restaurant_name, helper._body.response[i].restaurant_id.restaurant_address, helper._body.response[i].restaurant_id.restaurant_contect, helper._body.response[i].rider_id.rider_name, helper._body.response[i].rider_id.rider_mobile_no, helper._body.response[i].order_payment, helper._body.response[i].order_status, menuitems, helper._body.response[i].rider_lat, helper._body.response[i].rider_lan, helper._body.response[i].order_lat, helper._body.response[i].order_lan, helper._body.response[i].rider_tip, helper._body.response[i].rider_id.rider_id);
                }
            }
            order_service_1.orderService.ordersFromService = _this.orders;
            order_service_1.orderService.ordersLength = _this.orders.length;
        }, function (error) {
            //alert(JSON.stringify("Getting order error "+error._body.message));
            // alert("error");
            order_service_1.orderService.ordersLength = 0;
        });
    };
    SideDrawerPageComponent.prototype.logout = function () {
        console.log("logout");
        application_settings_1.setString("access_token", "");
        application_settings_1.setString("name", "");
        application_settings_1.setString("email", "");
        application_settings_1.setString("user_pc", "");
        /*let token=getString("access_token");
        alert(token);
        http.request({
            url: "http://192.168.100.19:3000/user/logout",

            method: "PUT",
            headers: { "Content-Type": "application/json" ,"token":token}

        }).then(function (response) {
           alert(JSON.stringify(response));
        }, function (e) {
            // console.log("Error occurred " + e);
            alert(JSON.stringify("errrrrrr"+e));
        });*/
    };
    SideDrawerPageComponent.prototype.ngAfterViewInit = function () {
        this.drawer = this.drawerComponent.sideDrawer;
    };
    SideDrawerPageComponent.prototype.ngOnDestroy = function () {
        this.drawer.off('drawerClosed');
    };
    SideDrawerPageComponent.prototype.toggleSideDrawer = function () {
        this.drawer.toggleDrawerState();
    };
    /**
     * Navigates to next page after drawer is closed.
     */
    SideDrawerPageComponent.prototype.navigateTo = function (routeCommands) {
        var _this = this;
        this.drawer.closeDrawer();
        var currentUrl = this.routerExtensions.router.routerState.snapshot.url;
        var newUrlTree = this.routerExtensions.router.createUrlTree(routeCommands);
        var newUrl = this.routerExtensions.router.serializeUrl(newUrlTree);
        console.log("current url :" + currentUrl + " : New Url : " + newUrl);
        if (currentUrl !== newUrl) {
            this.isContentVisible = false;
            if (newUrl == "/logout") {
                this.logout();
            }
            this.drawer.on('drawerClosed', function () {
                _this.ngZone.run(function () {
                    _this.routerExtensions.navigate(routeCommands, {
                        clearHistory: true,
                        animated: false
                    });
                    _this.isContentVisible = true;
                    _this.drawer.off('drawerClosed');
                });
            });
        }
    };
    SideDrawerPageComponent.prototype.setDrawerTransition = function () {
        if (platform_1.isAndroid) {
            this.drawerTransition = new sidedrawer_1.SlideInOnTopTransition();
        }
        if (platform_1.isIOS) {
            this.drawerTransition = new sidedrawer_1.PushTransition();
        }
    };
    SideDrawerPageComponent.prototype.setActionBarIcon = function (page) {
        if (platform_1.isAndroid) {
            page.actionBar.navigationButton = this.getNavigationButton();
        }
        if (platform_1.isIOS) {
            page.actionBar.actionItems.addItem(this.getNavigationButton());
        }
    };
    SideDrawerPageComponent.prototype.getNavigationButton = function () {
        var navActionItem = new action_bar_1.ActionItem();
        navActionItem.icon = 'res://ic_menu_black';
        if (navActionItem.ios) {
            navActionItem.ios.position = 'left';
        }
        navActionItem.on('tap', this.toggleDrawer.bind(this));
        return navActionItem;
    };
    SideDrawerPageComponent.prototype.toggleDrawer = function () {
        this.drawer.toggleDrawerState();
    };
    __decorate([
        core_1.ViewChild(angular_1.RadSideDrawerComponent),
        __metadata("design:type", angular_1.RadSideDrawerComponent)
    ], SideDrawerPageComponent.prototype, "drawerComponent", void 0);
    SideDrawerPageComponent = __decorate([
        core_1.Component({
            selector: 'side-drawer-page',
            templateUrl: 'modules/shared/side-drawer-page/side-drawer-page.component.html',
            styleUrls: ['modules/shared/side-drawer-page/side-drawer-page.component.css']
        }),
        __metadata("design:paramtypes", [router_2.RouterExtensions,
            router_1.ActivatedRoute,
            page_1.Page,
            core_1.NgZone,
            order_service_1.orderService])
    ], SideDrawerPageComponent);
    return SideDrawerPageComponent;
}());
exports.SideDrawerPageComponent = SideDrawerPageComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZS1kcmF3ZXItcGFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzaWRlLWRyYXdlci1wYWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUV1QjtBQUN2QiwwQ0FBK0M7QUFDL0Msc0RBQTZEO0FBQzdELDhFQU8rQztBQUMvQyxnQ0FBNkI7QUFDN0IscUNBQTBDO0FBQzFDLDRDQUF5QztBQUN6QyxzRUFFb0Q7QUFDcEQsaUVBRTRDO0FBSTVDLHdEQUFpRDtBQUNqRCxvREFBOEM7QUFFOUMsOERBQTBEO0FBRTFELElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQU0zQjtJQXFDSSxpQ0FBb0IsZ0JBQWtDLEVBQ2xDLGNBQThCLEVBQzlCLElBQVUsRUFDVixNQUFjLEVBQ2QsWUFBMEI7UUFKMUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUNWLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQXRDOUM7O1dBRUc7UUFDSCxxQkFBZ0IsR0FBWSxJQUFJLENBQUM7UUFPakM7O1dBRUc7UUFDSCxZQUFPLEdBQVU7WUFDYixFQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBQztZQUM1RCxFQUFDLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFDO1lBQ3hFLEVBQUMsUUFBUSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxDQUFDLHFCQUFxQixDQUFDLEVBQUM7WUFDOUUsRUFBQyxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFF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RUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUVPLDhDQUFZLEdBQXBCO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFsUmtDO1FBQWxDLGdCQUFTLENBQUMsZ0NBQXNCLENBQUM7a0NBQWtCLGdDQUFzQjtvRUFBQztJQURsRSx1QkFBdUI7UUFMbkMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsV0FBVyxFQUFFLGlFQUFpRTtZQUM5RSxTQUFTLEVBQUUsQ0FBQyxnRUFBZ0UsQ0FBQztTQUNoRixDQUFDO3lDQXNDd0MseUJBQWdCO1lBQ2xCLHVCQUFjO1lBQ3hCLFdBQUk7WUFDRixhQUFNO1lBQ0EsNEJBQVk7T0F6Q3JDLHVCQUF1QixDQW9SbkM7SUFBRCw4QkFBQztDQUFBLEFBcFJELElBb1JDO0FBcFJZLDBEQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LCBWaWV3Q2hpbGQsIEFmdGVyVmlld0luaXQsIE5nWm9uZSwgT25EZXN0cm95XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7Um91dGVyRXh0ZW5zaW9uc30gZnJvbSAnbmF0aXZlc2NyaXB0LWFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7XG4gICAgc2V0U3RyaW5nLFxuICAgIGdldFN0cmluZyxcbiAgICBzZXROdW1iZXIsXG4gICAgZ2V0TnVtYmVyLFxuICAgIHNldEJvb2xlYW4sXG4gICAgZ2V0Qm9vbGVhblxufSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvbi1zZXR0aW5nc1wiO1xuaW1wb3J0IHtQYWdlfSBmcm9tICd1aS9wYWdlJztcbmltcG9ydCB7aXNBbmRyb2lkLCBpc0lPU30gZnJvbSAncGxhdGZvcm0nO1xuaW1wb3J0IHtBY3Rpb25JdGVtfSBmcm9tICd1aS9hY3Rpb24tYmFyJztcbmltcG9ydCB7XG4gICAgUmFkU2lkZURyYXdlckNvbXBvbmVudCwgU2lkZURyYXdlclR5cGVcbn0gZnJvbSAnbmF0aXZlc2NyaXB0LXRlbGVyaWstdWkvc2lkZWRyYXdlci9hbmd1bGFyJztcbmltcG9ydCB7XG4gICAgUHVzaFRyYW5zaXRpb24sIFNsaWRlSW5PblRvcFRyYW5zaXRpb25cbn0gZnJvbSAnbmF0aXZlc2NyaXB0LXRlbGVyaWstdWkvc2lkZWRyYXdlcic7XG5pbXBvcnQge0Fic29sdXRlTGF5b3V0fSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL2Fic29sdXRlLWxheW91dFwiO1xuaW1wb3J0IHtTdGFja0xheW91dH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy9zdGFjay1sYXlvdXRcIjtcbmltcG9ydCB7TGFiZWx9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGFiZWwvbGFiZWwnO1xuaW1wb3J0IHtPcmRlcnN9IGZyb20gXCIuLi8uLi9teW9yZGVycy91c2VyT3JkZXJzXCI7XG5pbXBvcnQge0l0ZW1zfSBmcm9tIFwiLi4vLi4vbXlvcmRlcnMvRm9vZGl0ZW1cIjtcblxuaW1wb3J0IHtvcmRlclNlcnZpY2V9IGZyb20gXCIuLi8uLi9teW9yZGVycy9vcmRlci5zZXJ2aWNlXCI7XG5cbnZhciBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3NpZGUtZHJhd2VyLXBhZ2UnLFxuICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9zaGFyZWQvc2lkZS1kcmF3ZXItcGFnZS9zaWRlLWRyYXdlci1wYWdlLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnbW9kdWxlcy9zaGFyZWQvc2lkZS1kcmF3ZXItcGFnZS9zaWRlLWRyYXdlci1wYWdlLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTaWRlRHJhd2VyUGFnZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgQFZpZXdDaGlsZChSYWRTaWRlRHJhd2VyQ29tcG9uZW50KSBkcmF3ZXJDb21wb25lbnQ6IFJhZFNpZGVEcmF3ZXJDb21wb25lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBPbiB0YXAgb2YgYW55IHNpZGUtZHJhd2VyIGl0ZW0sIGhpZGluZyBjb250ZW50IGlmIHRoaXMgZmxhZyBpcyB0cnVlLlxuICAgICAqL1xuICAgIGlzQ29udGVudFZpc2libGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogRm9yIGFuZHJvaWQgdXNpbmcgU2xpZGVPblRvcCB0cmFuc2l0aW9uIGFuZCBmb3IgaU9TLCBwdXNoIHRyYW5zaXRpb24uXG4gICAgICovXG4gICAgZHJhd2VyVHJhbnNpdGlvbjogYW55O1xuXG4gICAgLyoqXG4gICAgICogTmF2aWdhdGlvbiBNZW51IEl0ZW1zXG4gICAgICovXG4gICAgbmF2TWVudTogYW55W10gPSBbXG4gICAgICAgIHtpbWFnZVVSTDogJ3JlczovL2hvbWUnLCBuYW1lOiAnRmluZCBGb29kJywgY29tbWFuZHM6IFsnLyddfSxcbiAgICAgICAge2ltYWdlVVJMOiAncmVzOi8vbXlvcmRlcnMnLCBuYW1lOiAnTXkgT3JkZXJzJywgY29tbWFuZHM6IFsnL215b3JkZXJzJ119LFxuICAgICAgICB7aW1hZ2VVUkw6ICdyZXM6Ly9teWNhcnQnLCBuYW1lOiAnTXkgQ2FydCcsIGNvbW1hbmRzOiBbJy9hZGQtdG8tY2FydC1kZXRhaWwnXX0sXG4gICAgICAgIHtpbWFnZVVSTDogJ3JlczovL215ZGV0YWlsJywgbmFtZTogJ015IFByb2ZpbGUnLCBjb21tYW5kczogWycvbXlkZXRhaWwnXX0sXG4gICAgICAgIHtpbWFnZVVSTDogJ3JlczovL3BheW1lbnRtZXRob2QnLCBuYW1lOiAnUGF5bWVudCBNZXRob2QnLCBjb21tYW5kczogWycvcGF5bWVudCddfSxcbiAgICAgICAge2ltYWdlVVJMOiAncmVzOi8vZGVsaXZlcmFkZHJlc3MnLCBuYW1lOiAnRGVsaXZlcnkgQWRkcmVzc2VzJywgY29tbWFuZHM6IFsnL2RlbGl2ZXJ5YWRkcmVzcyddfSxcbiAgICAgICAge2ltYWdlVVJMOiAncmVzOi8vYWJvdXR1cycsIG5hbWU6ICdBYm91dCBVcycsIGNvbW1hbmRzOiBbJy9hYm91dHVzJ119LFxuICAgICAgICB7aW1hZ2VVUkw6ICdyZXM6Ly9zaHVmZmxlJywgbmFtZTogJ0NoYW5nZSBQYXNzd29yZCcsIGNvbW1hbmRzOiBbJy9jaGFuZ2VwYXNzd29yZCddfSxcbiAgICAgICAge2ltYWdlVVJMOiAncmVzOi8vbG9nb3V0JywgbmFtZTogJ0xvZ291dCcsIGNvbW1hbmRzOiBbJy9sb2dvdXQnXX1cblxuICAgIF07XG5cbiAgICBwcml2YXRlIGRyYXdlcjogU2lkZURyYXdlclR5cGU7XG4gICAgcHVibGljIGVtYWlsOiBzdHJpbmc7XG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgdG9rZW46IHN0cmluZztcblxuXG4gICAgcHVibGljIG9yZGVyczogT3JkZXJzW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyRXh0ZW5zaW9uczogUm91dGVyRXh0ZW5zaW9ucyxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHBhZ2U6IFBhZ2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIG9yZGVyc2VydmljZTogb3JkZXJTZXJ2aWNlKSB7XG4gICAgICAgIGlmKHR5cGVvZihnZXRTdHJpbmcoXCJ1c2VyX2lkXCIpKSE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbGV0IGlkID0gSlNPTi5wYXJzZShnZXRTdHJpbmcoXCJ1c2VyX2lkXCIpKTtcbiAgICAgICAgICAgIC8vYWxlcnQoaWQpO1xuICAgICAgICAgICAgdGhpcy5nZXRVc2VyT3JkZXJEZXRhaWwoaWQpO1xuICAgICAgICAgfVxuXG4gICAgICAgICB0aGlzLnNldEFjdGlvbkJhckljb24odGhpcy5wYWdlKTtcbiAgICAgICAgIHRoaXMuc2V0RHJhd2VyVHJhbnNpdGlvbigpO1xuXG4gICAgICAgICB0aGlzLmVtYWlsID0gZ2V0U3RyaW5nKFwiZW1haWxcIik7XG4gICAgICAgICB0aGlzLm5hbWUgPSBnZXRTdHJpbmcoXCJuYW1lXCIpO1xuICAgICAgICAgdGhpcy50b2tlbiA9IGdldFN0cmluZyhcImFjY2Vzc190b2tlblwiKTtcbiAgICAgICAgIGlmICh0aGlzLnRva2VuID09IFwiXCIgfHwgdGhpcy50b2tlbj09bnVsbCkge1xuICAgICAgICAgICAgIHRoaXMuZW1haWwgPSBcIllvdXIgYXJlIG5vdCBsb2dnZWQgaW5cIjtcbiAgICAgICAgICAgICB0aGlzLm5hdk1lbnUgPSBbXG5cbiAgICAgICAgICAgICAgICAge2ltYWdlVVJMOiAncmVzOi8vbG9naW4nLCBuYW1lOiAnTG9naW4nLCBjb21tYW5kczogWycvbG9naW4nXX0sXG4gICAgICAgICAgICAgICAgIHtpbWFnZVVSTDogJ3JlczovL3JlZ2lzdGVyZWQnLCBuYW1lOiAnUmVnaXN0ZXInLCBjb21tYW5kczogWycvc2lnbnVwJ119XG5cbiAgICAgICAgICAgICBdO1xuICAgICAgICAgfVxuICAgICB9XG4gICAgICAgZ2V0VXNlck9yZGVyRGV0YWlsKGlkKSB7XG5cblxuICAgICAgICAgICB0aGlzLm9yZGVyc2VydmljZS5nZXRVc2VyT3JkZXJEZXRhaWxGcm9tQXBpKGlkKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgocmVzdWx0KSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgLyogdGhpcy5vcmRlcnMgPSBuZXcgQXJyYXk8T3JkZXJzPigpOyovXG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcy5jb21wbGV0ZWRfb3JkZXJzID0gbmV3IEFycmF5PE9yZGVycz4oKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGhlbHBlciA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG5cbiAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgaGVscGVyLl9ib2R5LnJlc3BvbnNlLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtZW51aXRlbXM6IEl0ZW1zW10gPSBbXTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgaGVscGVyLl9ib2R5LnJlc3BvbnNlW2ldLmZvb2RpdGVtX3RvX29yZGVyX0ZrLmxlbmd0aDsgaisrKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGs9MDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihqPT0wKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudWl0ZW1zLnB1c2gobmV3IEl0ZW1zKGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5mb29kaXRlbV90b19vcmRlcl9Ga1tqXS5pdGVtX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXIuX2JvZHkucmVzcG9uc2VbaV0uZm9vZGl0ZW1fdG9fb3JkZXJfRmtbal0uaXRlbV9wcmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5mb29kaXRlbV90b19vcmRlcl9Ga1tqXS5pdGVtX2lkLDEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaz0wO2s8bWVudWl0ZW1zLmxlbmd0aDtrKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobWVudWl0ZW1zW2tdLml0ZW1faWQ9PWhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5mb29kaXRlbV90b19vcmRlcl9Ga1tqXS5pdGVtX2lkKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVpdGVtc1trXS5pdGVtX3F1YW50aXR5Kz0xO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGs9MTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoaz09KG1lbnVpdGVtcy5sZW5ndGgtMSkgJiYgY2hrIT0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudWl0ZW1zLnB1c2gobmV3IEl0ZW1zKGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5mb29kaXRlbV90b19vcmRlcl9Ga1tqXS5pdGVtX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5mb29kaXRlbV90b19vcmRlcl9Ga1tqXS5pdGVtX3ByaWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXIuX2JvZHkucmVzcG9uc2VbaV0uZm9vZGl0ZW1fdG9fb3JkZXJfRmtbal0uaXRlbV9pZCwxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5vcmRlcl9zdGF0dXM9PVwiUGxhY2VkXCIpe1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9yZGVyc1tpXSA9IG5ldyBPcmRlcnMoaGVscGVyLl9ib2R5LnJlc3BvbnNlW2ldLm9yZGVyX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXIuX2JvZHkucmVzcG9uc2VbaV0ucmVzdGF1cmFudF9pZC5yZXN0YXVyYW50X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5yZXN0YXVyYW50X2lkLnJlc3RhdXJhbnRfYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLl9ib2R5LnJlc3BvbnNlW2ldLnJlc3RhdXJhbnRfaWQucmVzdGF1cmFudF9jb250ZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIk5vdCBhc3NpZ24geWV0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5vcmRlcl9wYXltZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXIuX2JvZHkucmVzcG9uc2VbaV0ub3JkZXJfc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51aXRlbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5vcmRlcl9sYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5vcmRlcl9sYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5yaWRlcl90aXAsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlcnNbaV0gPSBuZXcgT3JkZXJzKGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5vcmRlcl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLl9ib2R5LnJlc3BvbnNlW2ldLnJlc3RhdXJhbnRfaWQucmVzdGF1cmFudF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXIuX2JvZHkucmVzcG9uc2VbaV0ucmVzdGF1cmFudF9pZC5yZXN0YXVyYW50X2FkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5yZXN0YXVyYW50X2lkLnJlc3RhdXJhbnRfY29udGVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLl9ib2R5LnJlc3BvbnNlW2ldLnJpZGVyX2lkLnJpZGVyX25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5yaWRlcl9pZC5yaWRlcl9tb2JpbGVfbm8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5vcmRlcl9wYXltZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXIuX2JvZHkucmVzcG9uc2VbaV0ub3JkZXJfc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51aXRlbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5yaWRlcl9sYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5yaWRlcl9sYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5vcmRlcl9sYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5vcmRlcl9sYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5yaWRlcl90aXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5fYm9keS5yZXNwb25zZVtpXS5yaWRlcl9pZC5yaWRlcl9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG5cblxuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIG9yZGVyU2VydmljZS5vcmRlcnNGcm9tU2VydmljZSA9IHRoaXMub3JkZXJzO1xuXG4gICAgICAgICAgICAgICAgb3JkZXJTZXJ2aWNlLm9yZGVyc0xlbmd0aD10aGlzLm9yZGVycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICB9LChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KEpTT04uc3RyaW5naWZ5KFwiR2V0dGluZyBvcmRlciBlcnJvciBcIitlcnJvci5fYm9keS5tZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAvLyBhbGVydChcImVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICBvcmRlclNlcnZpY2Uub3JkZXJzTGVuZ3RoPTA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAgbG9nb3V0KCkge1xuICAgICAgICAgY29uc29sZS5sb2coXCJsb2dvdXRcIik7XG5cbiAgICAgICAgIHNldFN0cmluZyhcImFjY2Vzc190b2tlblwiLCBcIlwiKTtcbiAgICAgICAgIHNldFN0cmluZyhcIm5hbWVcIiwgXCJcIik7XG4gICAgICAgICBzZXRTdHJpbmcoXCJlbWFpbFwiLCBcIlwiKTtcbiAgICAgICAgIHNldFN0cmluZyhcInVzZXJfcGNcIiwgXCJcIik7XG4gICAgICAgICAvKmxldCB0b2tlbj1nZXRTdHJpbmcoXCJhY2Nlc3NfdG9rZW5cIik7XG4gICAgICAgICBhbGVydCh0b2tlbik7XG4gICAgICAgICBodHRwLnJlcXVlc3Qoe1xuICAgICAgICAgICAgIHVybDogXCJodHRwOi8vMTkyLjE2OC4xMDAuMTk6MzAwMC91c2VyL2xvZ291dFwiLFxuXG4gICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgLFwidG9rZW5cIjp0b2tlbn1cblxuICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGFsZXJ0KEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSk7XG4gICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiRXJyb3Igb2NjdXJyZWQgXCIgKyBlKTtcbiAgICAgICAgICAgICBhbGVydChKU09OLnN0cmluZ2lmeShcImVycnJycnJyXCIrZSkpO1xuICAgICAgICAgfSk7Ki9cblxuXG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLmRyYXdlciA9IHRoaXMuZHJhd2VyQ29tcG9uZW50LnNpZGVEcmF3ZXI7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZHJhd2VyLm9mZignZHJhd2VyQ2xvc2VkJyk7XG4gICAgfVxuXG4gICAgdG9nZ2xlU2lkZURyYXdlcigpIHtcbiAgICAgICAgdGhpcy5kcmF3ZXIudG9nZ2xlRHJhd2VyU3RhdGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOYXZpZ2F0ZXMgdG8gbmV4dCBwYWdlIGFmdGVyIGRyYXdlciBpcyBjbG9zZWQuXG4gICAgICovXG4gICAgbmF2aWdhdGVUbyhyb3V0ZUNvbW1hbmRzOiBhbnlbXSkge1xuICAgICAgICB0aGlzLmRyYXdlci5jbG9zZURyYXdlcigpO1xuICAgICAgICBsZXQgY3VycmVudFVybCA9IHRoaXMucm91dGVyRXh0ZW5zaW9ucy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3QudXJsO1xuICAgICAgICBsZXQgbmV3VXJsVHJlZSA9IHRoaXMucm91dGVyRXh0ZW5zaW9ucy5yb3V0ZXIuY3JlYXRlVXJsVHJlZShyb3V0ZUNvbW1hbmRzKTtcbiAgICAgICAgbGV0IG5ld1VybCA9IHRoaXMucm91dGVyRXh0ZW5zaW9ucy5yb3V0ZXIuc2VyaWFsaXplVXJsKG5ld1VybFRyZWUpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImN1cnJlbnQgdXJsIDpcIiArIGN1cnJlbnRVcmwgKyBcIiA6IE5ldyBVcmwgOiBcIiArIG5ld1VybCk7XG4gICAgICAgIGlmIChjdXJyZW50VXJsICE9PSBuZXdVcmwpIHtcblxuICAgICAgICAgICAgdGhpcy5pc0NvbnRlbnRWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAobmV3VXJsID09IFwiL2xvZ291dFwiKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmxvZ291dCgpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRyYXdlci5vbignZHJhd2VyQ2xvc2VkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm91dGVyRXh0ZW5zaW9ucy5uYXZpZ2F0ZShyb3V0ZUNvbW1hbmRzLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySGlzdG9yeTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29udGVudFZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdlci5vZmYoJ2RyYXdlckNsb3NlZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldERyYXdlclRyYW5zaXRpb24oKSB7XG4gICAgICAgIGlmIChpc0FuZHJvaWQpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd2VyVHJhbnNpdGlvbiA9IG5ldyBTbGlkZUluT25Ub3BUcmFuc2l0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNJT1MpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd2VyVHJhbnNpdGlvbiA9IG5ldyBQdXNoVHJhbnNpdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRBY3Rpb25CYXJJY29uKHBhZ2U6IFBhZ2UpIHtcbiAgICAgICAgaWYgKGlzQW5kcm9pZCkge1xuICAgICAgICAgICAgcGFnZS5hY3Rpb25CYXIubmF2aWdhdGlvbkJ1dHRvbiA9IHRoaXMuZ2V0TmF2aWdhdGlvbkJ1dHRvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSU9TKSB7XG4gICAgICAgICAgICBwYWdlLmFjdGlvbkJhci5hY3Rpb25JdGVtcy5hZGRJdGVtKHRoaXMuZ2V0TmF2aWdhdGlvbkJ1dHRvbigpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TmF2aWdhdGlvbkJ1dHRvbigpIHtcbiAgICAgICAgbGV0IG5hdkFjdGlvbkl0ZW0gPSBuZXcgQWN0aW9uSXRlbSgpO1xuICAgICAgICBuYXZBY3Rpb25JdGVtLmljb24gPSAncmVzOi8vaWNfbWVudV9ibGFjayc7XG4gICAgICAgIGlmIChuYXZBY3Rpb25JdGVtLmlvcykge1xuICAgICAgICAgICAgbmF2QWN0aW9uSXRlbS5pb3MucG9zaXRpb24gPSAnbGVmdCc7XG4gICAgICAgIH1cbiAgICAgICAgbmF2QWN0aW9uSXRlbS5vbigndGFwJywgdGhpcy50b2dnbGVEcmF3ZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIHJldHVybiBuYXZBY3Rpb25JdGVtO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9nZ2xlRHJhd2VyKCkge1xuICAgICAgICB0aGlzLmRyYXdlci50b2dnbGVEcmF3ZXJTdGF0ZSgpO1xuICAgIH1cbn1cbiJdfQ==