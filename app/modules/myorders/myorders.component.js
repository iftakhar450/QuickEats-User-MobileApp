"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var order_service_1 = require("./order.service");
var application_settings_1 = require("tns-core-modules/application-settings");
var router_1 = require("@angular/router");
var MyordersComponent = /** @class */ (function () {
    // This pattern makes use of Angular�s dependency injection implementation to inject an instance of the ItemService service into this class.
    // Angular knows about this service because it is included in your app�s main NgModule, defined in app.module.ts.
    function MyordersComponent(page, orderservice, router) {
        this.page = page;
        this.orderservice = orderservice;
        this.router = router;
        this.user_orders = [];
        this.orders = [];
        this.user_completed_orders = [];
        this.completed_orders = [];
        this.sta = 1;
        this.order_details = [];
        this.completed_order_details = [];
    }
    MyordersComponent.prototype.ngOnInit = function () {
        this.user_orders = order_service_1.orderService.ordersFromService;
        this.orderslength = order_service_1.orderService.ordersLength;
        var id = JSON.parse(application_settings_1.getString("user_id"));
    };
    MyordersComponent.prototype.refreshpage = function () {
        var _this = this;
        var currentUrl = this.router.url;
        var refreshUrl = currentUrl.indexOf('login') > -1 ? '/login' : '/login';
        this.router.navigateByUrl(refreshUrl).then(function () { return _this.router.navigateByUrl(currentUrl); });
    };
    MyordersComponent.prototype.search_restaurant_in_your_area = function () {
        this.router.navigate(["/restaurants"]);
    };
    MyordersComponent.prototype.CompletedOrderDetail = function (args) {
        alert("tapped" + this.user_completed_orders[args.index].order_status);
        this.order_details = this.user_completed_orders[args.index].menuitems;
        this.status = this.user_completed_orders[args.index].order_status;
        this.order_id = this.user_completed_orders[args.index].order_id;
        var ablayout = this.page.getViewById("completedorderdetail");
        ablayout.visibility = "visible";
    };
    MyordersComponent.prototype.PendingOrderDetail = function (args) {
        this.order_details = this.user_orders[args.index].menuitems;
        this.status = this.user_orders[args.index].order_status;
        this.order_id = this.user_orders[args.index].order_id;
        this.grossamount = this.user_orders[args.index].order_payment;
        this.ridertip = this.user_orders[args.index].rider_tip;
        this.totalamount = parseInt(this.user_orders[args.index].order_payment) + parseInt(this.ridertip);
        console.log("order detail" + JSON.stringify(this.user_orders[args.index]));
        console.log(this.user_orders[args.index]);
        var orderlist = this.page.getViewById("orderlist");
        orderlist.visibility = "collapse";
        var ablayout = this.page.getViewById("completedorderdetail");
        ablayout.visibility = "visible";
        var btn = this.page.getViewById("trackriderbtn");
        if (this.status == "Going") {
            btn.isEnabled = true;
            btn.opacity = 1;
        }
        else {
            btn.isEnabled = false;
            btn.opacity = .5;
        }
    };
    MyordersComponent.prototype.OkorderDetail = function () {
        var ablayout = this.page.getViewById("completedorderdetail");
        ablayout.visibility = "collapse";
        var orderlist = this.page.getViewById("orderlist");
        orderlist.visibility = "visible";
    };
    MyordersComponent.prototype.trackyourRider = function () {
        this.router.navigate(["/trackrider", this.order_id]);
    };
    MyordersComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./myorders.component.html",
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            styleUrls: ['./myorders.css']
        }),
        __metadata("design:paramtypes", [page_1.Page, order_service_1.orderService, router_1.Router])
    ], MyordersComponent);
    return MyordersComponent;
}());
exports.MyordersComponent = MyordersComponent;
//# sourceMappingURL=data:application/json;base64,